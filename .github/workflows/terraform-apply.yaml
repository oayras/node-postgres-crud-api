name: "Terraform Apply"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'warning'
        type: choice
        options:
          - prod

env:
  TF_CLOUD_ORGANIZATION: ${{ vars.TF_ORGANIZATION }}
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
  CONFIG_DIRECTORY: "./terraform"


jobs:
  terraform:
    if: github.ref == 'refs/heads/master'
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    permissions: # granular permissions
      # so GitHub can check out this repo using the default github.token
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Check if ECR repository exists, create if not
        env:
          REPOSITORY: ${{ github.repository }}  
        run: |
            if ! aws ecr describe-repositories --repository-names $REPOSITORY > /dev/null 2>&1; then
                echo "Repository $REPOSITORY does not exist. Creating..."
                aws ecr create-repository --repository-name $REPOSITORY
            else
                echo "Repository $REPOSITORY already exists."
            fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ github.repository }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Generate terraform.tfvars
        run: |
          cat << EOF > terraform/terraform.tfvars
          repoName = "${{ github.event.repository.name }}"
          appPort = "${{ vars.APP_PORT }}"
          alb_name = "${{ vars.AWS_ALB_NAME }}"
          aws_region = "${{ vars.AWS_REGION }}"
          cloudwatch_loggroup = "${{ vars.AWS_LOG_GROUP }}"
          execution_role_arn = "${{ vars.AWS_EXECUTION_ROLE }}"
          fqdn = "${{ vars.APP_FQDN }}"
          environment = "${{ inputs.environment }}"
          image =  "${{ steps.login-ecr.outputs.registry }}/${{ github.repository }}:${{ github.sha }}"
          EOF

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: apply-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}

      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: apply-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}
          
      - name: Apply
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0
        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"